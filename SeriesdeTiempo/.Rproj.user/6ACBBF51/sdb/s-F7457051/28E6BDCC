{
    "collab_server" : "",
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\n\nshinyServer(function(input, output) {\n\n#RECIBIR EL ARCHIVO \n  \n  archivo_in <- reactive({\n     if(is.null(input$archivo))\n      \n      return(NULL)\n      \n    archivo<- input$archivo\n    read.table(file=archivo$datapath, header=FALSE, sep=\",\", dec=\".\" )\n    \n  })\n\n  \n  output$contents <- renderTable({\n  \n    req(input$archivo)\n    datos <- archivo_in()\n    head(datos)\n  })\n  \n  output$summary <- renderPrint({\n    \n    if(is.null(archivo_in()))\n    {\n      return(NULL)   \n    }else{\n      \n      datosTS <- ts(archivo_in())\n    }\n    \n\n    #datos <- archivo_in()\n    summary(datosTS)\n  })\n  \n  \n  \n  \n#CUERPO DEL PANEL DE ESTADÍSTICOS\n \n   output$distPlot <- renderPlot({\n     \n     \n     if(is.null(archivo_in()))\n     {\n       return(NULL)   \n     }else{\n       datos <-  archivo_in()\n       datosTS <- ts(archivo_in(), frequency=12, start=c(1946,1))\n       \n      }\n      if(input$radio==1){\n       plot(datosTS)\n     }else{\n       if(input$radio==2){\n \n        # datosTSdecomp <- decompose(datosTS)\n        # plot(datosTSdecomp)\n         hist(datosTS)\n       #decompose\n       }else{\n         if(input$radio==3){\n           acf(datosTS)\n          }else{\n           if(input$radio==4){\n            pacf(datosTS)\n           }else{\n             if(input$radio==5){\n               datosTSdecomp <- decompose(datosTS)\n               plot(datosTSdecomp)\n             }\n           }\n         }\n       }\n     }   \n  })\n  \n  \n \n #CUERPO DEL PANEL DE AJUSTE DE FUNCIONES  \n   \n   output$distPlot2 <- renderPlot({\n     \n     \n     if(is.null(archivo_in()))\n     {\n       return(NULL)   \n     }else{\n       \n       datosTS <- ts(archivo_in(), frequency=12, start=c(1946,1))\n     }\n     if(input$radio2==1){\n      \n       t <- seq(1:length(datosTS))                     \n       m <- lm(formula = datosTS ~ t)\n       \n       plot(t,datosTS, type = \"l\")\n       lines(m$fitted.values, col = \"red\", lwd = 2)\n       #plot(datosTS)\n     }else{\n       if(input$radio2==2){\n         \n         t <- seq(1:length(datosTS)) \n         tt <- t*t\n         m <- lm(formula = datosTS ~ t +tt)\n         \n         plot(t,datosTS, type = \"l\")\n         lines(m$fitted.values, col = \"red\", lwd = 2)\n         #plot(datosTS)\n   \n         \n         \n       }else{\n         if(input$radio2==3){\n           \n           \n           \n         }\n       }\n     }   \n   })\n   \n   \n   \n   output$distPlot3 <- renderPlot({\n     \n     \n     if(is.null(archivo_in()))\n     {\n       return(NULL)   \n     }else{\n       datos <-  archivo_in()\n       datosTS <- ts(archivo_in(), frequency=12, start=c(1946,1))\n       \n     }\n     if(input$prediccion==1){\n     #Prediccion Series de Tiempo\n       \n       plot(datosTS)\n     }else{\n       if(input$prediccion==2){\n         #Prediccion Holt-Winters\n         \n         fit<-HoltWinters(datosTS)\n         forecast <- predict(fit, n.ahead = input$nropreds, prediction.interval = T, level = input$intervaloconf)\n         plot(fit, forecast)\n        \n       }else{\n         if(input$prediccion==3){\n           #Prediccion ARIMA\n           \n         fit= Arima(datosTS, order = c(0,0,1))\n         forecast = forecast(fit,h=input$nropreds)\n         plot(forecast, col='green')\n        lines(fit$fitted, col='red')\n      \n   #     plot(datosTS)\n   #      LH.pred<-predict(fit,n.ahead=8)\n  #      lines(LH.pred$pred , col = 'blue')\n\n         }\n       }\n     }   \n   })\n\n})\n",
    "created" : 1506388771005.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2452518633",
    "id" : "28E6BDCC",
    "lastKnownWriteTime" : 1506563849,
    "last_content_update" : 1506563849081,
    "path" : "~/GitHub/SeriesdeTiempo/SeriesdeTiempo/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}