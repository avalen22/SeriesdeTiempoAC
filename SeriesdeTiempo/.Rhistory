shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
kings <- scan("http://robjhyndman.com/tsdldata/misc/kings.dat",skip=3)
kingstimeseries <- ts(kings)
bins <- seq(min(kings), max(kings), length.out = input$bins + 1)
bins <- seq(min(kings), max(kings), length.out = bins + 1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/GitHub/Series-Tiempo/R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
help(cat)
help(boot)
library(boot)
help(boot)
acf(birthstimeseries)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/GitHub/Series-Tiempo/R')
runApp()
help("reactive")
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp('~/GitHub/Series-Tiempo/R')
runApp()
runApp()
runApp()
help(red)
help("req")
runApp()
shiny::runApp()
runApp('~/GitHub/Series-Tiempo/R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/GitHub/Series-Tiempo/R')
runApp('~/GitHub/Series-Tiempo/R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help("navbarPage")
help("fluidPage")
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
help(ts)
runApp()
runApp()
runApp('~/GitHub/Series-Tiempo/R')
runApp('~/GitHub/Series-Tiempo/R')
help(read.table)
help(ts)
help(read.table)
runApp()
runApp()
hist(datosTS, breaks =length(datosTS)/5)
runApp()
hist(datosTS)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/GitHub/Series-Tiempo/R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/GitHub/Series-Tiempo/R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(arima)
runApp()
runApp('~/GitHub/Series-Tiempo/R')
runApp()
runApp('~/GitHub/Series-Tiempo/R')
shiny::runApp()
runApp()
a = read.table(file=archivo$datapath, header=FALSE, sep=",", dec="." )
View(a)
runApp()
runApp()
runApp()
summary(datosTS)
datosTS
summary(datosTS)
meanData = mean(datosTS)
meanData
quantile(datosTS,probs = c(0,0.25,0.75,1))
meanData = mean(datosTS)
sdData = sd(datosTS)
quantileData = quantile(datosTS,probs = c(0,0.25,0.75,1))
quantileData
meanData = mean(datosTS)
sdData = sd(datosTS)
quantileData = quantile(datosTS,probs = c(0,0.25,0.5,0.75,1))
data.frame(Min = quantileData[0],
PCuartil = quantileData[1],
Media = meanData,
mediana = quantileData[3],
TCuartil = quantileData[4],
Max = quantileData[5])
quantileData[1]
quantileData[2]
meanData = mean(datosTS)
sdData = sd(datosTS)
quantileData = quantile(datosTS,probs = c(0,0.25,0.5,0.75,1))
meanData = mean(datosTS)
sdData = sd(datosTS)
quantileData = quantile(datosTS,probs = c(0,0.25,0.5,0.75,1))
runApp()
meanData = mean(datosTS)
sdData = sd(datosTS)
quantileData = quantile(datosTS,probs = c(0,0.25,0.5,0.75,1))
summaryTable = data.frame(Min = quantileData[1],
PCuartil = quantileData[2],
Media = meanData,
mediana = quantileData[3],
TCuartil = quantileData[4],
Max = quantileData[5])
summaryTable
row.names(summaryTable) = NULL
summaryTable
runApp()
runApp()
runApp()
m$residuals
(m$residuals)^2
sum((m$residuals)^2)/length(m$residuals)
sqrt(sum((m$residuals)^2)/length(m$residuals))
shiny::runApp()
runApp()
shiny::runApp()
runApp('~/GitHub/Series-Tiempo/R')
runApp()
runApp()
runApp()
runApp()
mseLM = data.frame(1,2,3,4,5)
mseLM
rmseLM = dataframe(sqrt(mseLM))
rmseLM = data.frame(sqrt(mseLM))
rmseLM
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
meanData = mean(datosTS)
sdData = sd(datosTS)
quantileData = quantile(datosTS,probs = c(0,0.25,0.5,0.75,1))
summaryTable = data.frame(Min = quantileData[1],
PCuartil = quantileData[2],
Media = meanData,
mediana = quantileData[3],
TCuartil = quantileData[4],
Max = quantileData[5])
row.names(summaryTable) = NULL
summaryTable
runApp()
runApp()
runApp()
runApp()
mseLM = data.frame(sum((m.lin$residuals)^2)/length(m.lin$residuals),
sum((m.cuad$residuals)^2)/length(m.cuad$residuals),
sum((m.cub$residuals)^2)/length(m.cub$residuals),
sum((m.log$residuals)^2)/length(m.log$residuals)
)
names(mseLM) = c("Lineal","Cuadrática","Cúbica","Logarítmica")
rsmeLM = data.frame(sqrt(mseLM))
mseLM
rsmeLM
mseLM[,2] = rsmeLM
mseLM[2] = rsmeLM
mseLM[1] = rsmeLM
mseLM[1,] = rsmeLM
mseLM
mseLM[2,] = rsmeLM
mseLM
seLM = data.frame(sum((m.lin$residuals)^2)/length(m.lin$residuals),
sum((m.cuad$residuals)^2)/length(m.cuad$residuals),
sum((m.cub$residuals)^2)/length(m.cub$residuals),
sum((m.log$residuals)^2)/length(m.log$residuals)
)
names(mseLM) = c("Lineal","Cuadrática","Cúbica","Logarítmica")
rsmeLM = data.frame(sqrt(mseLM))
mseLM[2,] = rsmeLM
mseLM
mseLM = data.frame(sum((m.lin$residuals)^2)/length(m.lin$residuals),
sum((m.cuad$residuals)^2)/length(m.cuad$residuals),
sum((m.cub$residuals)^2)/length(m.cub$residuals),
sum((m.log$residuals)^2)/length(m.log$residuals)
)
names(mseLM) = c("Lineal","Cuadrática","Cúbica","Logarítmica")
mseLM
rsmeLM = data.frame(sqrt(mseLM))
mseLM[2,] = rsmeLM
mseLM
row.names(mseLM) <- c("sfs","fbr")
mseLM
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
mseLM = data.frame(sum((m.lin$residuals)^2)/length(m.lin$residuals),
sum((m.cuad$residuals)^2)/length(m.cuad$residuals),
sum((m.cub$residuals)^2)/length(m.cub$residuals),
sum((m.log$residuals)^2)/length(m.log$residuals)
)
mseLM
names(mseLM) = c("Lineal","Cuadrática","Cúbica","Logarítmica")
mseLM
rsmeLM = data.frame(sqrt(mseLM))
mseLM[2,] = rsmeLM
mseLM
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
colClasses = c("Date", "character", "character")
col.names = c("Date", "File", "User")
df <- read.table(text = "",
colClasses = colClasses,
col.names = col.names)
df
runApp()
runApp()
runApp()
runApp()
runApp()
rsmeLM = c(sqrt(mseLM))
errores = rbind(mseLM, rsmeLM)
rsmeLM
rsmeLM
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
rsmeLM = data.frame(sqrt(mseLM))
errores = rbind(mseLM, rsmeLM)
typeof(errores)
erroresdf = data.frame(errores, row.names = c("Lineal","Cuadrática","Cúbica","Logarítmica"))
typeof(erroresdf)
erroresdf = data.frame(errores, row.names = c("Lineal","Cuadrática","Cúbica","Logarítmica"))
rsmeLM = data.frame(sqrt(mseLM))
errores = rbind(mseLM, rsmeLM)
erroresdf = data.frame(errores, row.names = c("Lineal","Cuadrática","Cúbica","Logarítmica"))
erroresdf = data.frame(errores, row.names = c("rsmeLM","smeLM"))
typeof(erroresdf)
erroresdf = data.frame(errores)
typeof(erroresdf)
X <- data.frame(bad=1:3, worse=rnorm(3))
typeof(X)
X
colnames(X) <- c("good", "better")
X
runApp()
runApp()
runApp()
View(mseLM)
View(mseLM)
View(mseLM)
View(mseLM)
View(rsmeLM)
View(rsmeLM)
View(errores)
View(errores)
runApp()
View(mseLM)
View(errores)
View(errores)
runApp()
View(errores)
View(errores)
runApp()
View(mseLM)
View(rsmeLM)
runApp()
View(df)
View(mseLM)
View(rmseLM)
View(rmseLM)
View(mseLM)
View(mseLM)
runApp()
View(mseLM)
View(mseLM)
View(rsmeLM)
View(rsmeLM)
View(errores)
View(errores)
View(df)
View(df)
runApp()
View(mseLM)
View(mseLM)
View(rsmeLM)
View(rsmeLM)
View(myData)
View(myData)
View(df)
View(df)
View(mseLM)
View(mseLM)
View(rmseLM)
View(rmseLM)
View(mseLM)
View(mseLM)
View(rmseLM)
View(rmseLM)
View(mseLM)
View(mseLM)
runApp()
runApp()
runApp('~/GitHub/Series-Tiempo/R')
runApp('~/GitHub/Series-Tiempo/R')
runApp()
shiny::runApp()
x<-cumsum(rnorm(50))
plot(x, type "l")
plot(x, type="l")
x<-cumsum(rnorm(50)+0.5+(1:50))
plot(x, type="l")
lm(x ~ 1>50)
runApp()
runApp()
runApp()
runApp()
m.cuad
m.lin
runApp()
t
datosTS
m.lin$fitted.values
none
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
datosTS
runApp()
runApp()
datosTS
logt <- log(datosTS)
logt
plot(datosTS)
lines(logt)
plot(datosTS)
lines(logt)
runApp()
runApp()
runApp()
runApp()
runApp()
